Design Assessment
----------------- 

Total time: 150 minutes
Submission: A single runnable file named Main.java, submitted either (a) by email 
or (b) as a link to a repo. No other formats accepted.
Note: I will run a SonarQube code-analysis; Any remaining/increased code smells 
will lose points.

Intent
------

This is a design-focused exercise. Functionality is intentionally minimal and 
should remain roughly the same after your changes. 
Marks reward refactoring quality, design choices, and 
justification (factory, interfaces, inheritance/composition, enums, 
clean concurrency).

Deliverables
------------

- One file: Main.java that compiles and runs.
- Brief, visible console output demonstrating your changes (keep it minimal).
- A header comment at the top of Main.java listing:
    - What you refactored (bullets)
    - Patterns you implemented (bullets) and a short rationale (2–5 lines)

Tasks 
-----

A. Baseline Refactor & Redesign (60 min):
    - Encapsulation and polymorophism where needed.
    - Use type-appropriate behaviour.
    - Improve names and structure while staying within a single file.
    - Keep behaviour/output roughly equivalent.

B. Interfaces & Enums (30 min)
    - Introduce small, purposeful interfaces to express behaviour.
    - Use enums where they clarify configuration/behaviour.

C. Factory (30 min)
    - Add a simple factory responsible for constructing animals from minimal inputs.
    - Use the factory from main (visible in the flow).

D. Concurrency (30 min)
    - Add a small background thread feature that interacts with your model.

Marking
------- 

50% — Refactor & Redesign Quality
Encapsulation; removal of smells; meaningful class responsibilities; improved names;
behaviour preserved.

10% — Comments & Justification
Clear header comment explaining what/why; concise in-code comments where it 
aids design comprehension.

10% — SonarQube Analysis Penalty/Bonus
Fewer smells post-refactor is good. New or lingering obvious smells reduce marks.

10% — Interfaces & Enums
Interfaces that clarify contracts; enums used for real 
decisions/config (not ornamental).

10% — Factory
Factory that centralises creation and reduces coupling; used from main.

10% — Concurrency
A thread added in a way that avoids races.

Important: Logic depth is not the goal. Design is.

Constraints
-----------
    - Must remain a single runnable file: Main.java
    - Submission via email or repo link only.
    - Behaviour/output should be roughly the same as the starter 
      

Known Issue Density (for REFERENCE)= ~25
